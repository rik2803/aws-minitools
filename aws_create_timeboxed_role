#! /usr/bin/env bash

usage() {
  cat << EOF
    Message: ${1:-No details available}
    Usage: ${0} -u username -s nn -e mm [-p policy]
      nn: starting hour of validity of role
      mm: ending hour of validity of role
      nn < mm
EOF
}

is_num() {
  [ "$1" ] && [ -z "${1//[0-9]}" ]
}

get_target_account_id() {
  aws sts get-caller-identity --query "Account" --output text
}


user=""
policy=""
export hour_start=8
export hour_end=12
export today=$(date +"%Y-%m-%d")
target_account_id=$(get_target_account_id)
assume_role_policy_document_template="
{
  \"Version\": \"2012-10-17\",
  \"Statement\": [
    {
      \"Effect\": \"Allow\",
      \"Principal\": {
        \"AWS\": \"arn:aws:iam::\${AWS_BASTION_ACCOUNT_ID}:root\"
      },
      \"Action\": \"sts:AssumeRole\",
      \"Condition\": {
        \"Bool\": {
          \"aws:SecureTransport\": \"true\",
          \"aws:MultiFactorAuthPresent\": \"true\"
        },
        \"NumericLessThan\": { \"aws:MultiFactorAuthAge\": \"43200\" },
        \"DateGreaterThan\": {\"aws:CurrentTime\": \"\${today}T\${hour_start}:00:00Z\"},
        \"DateLessThan\": {\"aws:CurrentTime\": \"\${today}T\${hour_end}:59:59Z\"}
      }
    }
  ]
}
"

while getopts "u:s:e:p:?" opt; do
  case ${opt} in
    u)
      user=${OPTARG}
      ;;
    s)
      hour_start=${OPTARG}
      ;;
    e)
      hour_end=${OPTARG}
      ;;
    p)
      policy=${OPTARG}
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done

### Validate input
is_num ${hour_start} || { usage "Start hour should numeric"; exit 1; }
is_num ${hour_end}  || { usage "End hour should be numeric"; exit 1; }
[[ ${hour_start} -lt ${hour_end} ]] || { usage "Start hour should be smaller than end hour"; exit 1; }
[[ -z ${user} ]] && { usage "Username is required"; exit 1; }
[[ -z ${AWS_BASTION_ACCOUNT_ID} ]] && { usage "Environment variable AWS_BASTION_ACCOUNT_ID is required"; exit 1; }
[[ -z ${AWS_MY_ORGANIZATION} ]] && { usage "Environment variable AWS_MY_ORGANIZATION is required"; exit 1; }

### Create assume_role_policy_document
assume_role_policy_document=$(echo ${assume_role_policy_document_template} | envsubst)

### Action!!

### Remove attached policies
for attached_role_policy in $(aws iam list-attached-role-policies --role-name  "${user}-timeboxed-role" --query 'AttachedPolicies[*].PolicyArn' --output text); do
  aws iam detach-role-policy \
       --role-name "${user}-timeboxed-role" \
       --policy-arn "${attached_role_policy}" > /dev/null 2>&1 || true
done

### Remove inline policies
for role_policy in $(aws iam list-role-policies --role-name "${user}-timeboxed-role" --query 'PolicyNames' --output text); do
  aws iam delete-role-policy --role-name rikregular-timeboxed-role --policy-name "${role_policy}" > /dev/null 2>&1 || true
done

aws iam delete-role --role-name "${user}-timeboxed-role" >/dev/null 2>&1 || true

aws iam create-role --role-name "${user}-timeboxed-role" \
                    --assume-role-policy-document "${assume_role_policy_document}"

aws iam attach-role-policy \
     --role-name "${user}-timeboxed-role" \
     --policy-arn "arn:aws:iam::${target_account_id}:policy/${AWS_MY_ORGANIZATION}SSM/SSMSession"

if [[ -n ${policy} ]]; then
  aws iam attach-role-policy \
       --role-name "${user}-timeboxed-role" \
       --policy-arn "arn:aws:iam::${target_account_id}:policy/${policy}"
fi

cat << EOF

### USER INSTRUCTIONS ###

The user should first add this JSON snippet to their ~/.assumerole file:

    "timeboxed": {
      "aws_profile": "ixor-bastion",
      "aws_account": "${target_account_id}",
      "aws_mfa_arn": "arn:aws:iam::${AWS_BASTION_ACCOUNT_ID}:mfa/${user}",
      "aws_role": "${user}-timeboxed-role",
      "max_session_duration": "3600"
    },

And run this command to assume this role:

assumerole timeboxed <otp-code>

EOF
